# To run this code you need to install the following dependencies:
# pip install google-genai

import base64
import os
from google import genai
from google.genai import types
import json
from dotenv import load_dotenv
import os
load_dotenv()


PROMPT_TEMPLATE = """
You are an expert Instagram content creator. The generated captions should look like it were generated by a human. Don't use repetative AI words or phrases.
Your task is to generate creative and discoverable captions for an image described as follows:
"{description}"

Generate distinct styles of captions: 'Evocative & Broad', 'Intriguing & Question-Based', 'Short & Punchy with Keywords', 'A touch of poetic','Focus on the feeling','Witty', 'Inspirational', and 'Minimalist'.
For each style, provide 2 unique caption options.

Respond with ONLY a valid JSON object and nothing else. Do not include markdown formatting like ```json or any other explanatory text.
The JSON object must follow this structure:
[
  {{
    "style": "Witty",
    "captions": [
      "Caption 1 text with relevant emojis and hashtags.",
      "Caption 2 text with relevant emojis and hashtags."
    ]
  }},
  {{
    "style": "Inspirational",
    "captions": [
      "Caption 1 text with relevant emojis and hashtags.",
      "Caption 2 text with relevant emojis and hashtags."
    ]
  }},
  {{
    "style": "Minimalist",
    "captions": [
      "Caption 1 text with relevant emojis and hashtags.",
      "Caption 2 text with relevant emojis and hashtags."
    ]
  }}
]
"""


def generate(GeneratedCaption):
    client = genai.Client(
        api_key=os.getenv('GOOGLE_API_KEY'),
    )

    model = "gemma-3n-e2b-it"
    contents = [
        types.Content(
            role="user",
            parts=[
                types.Part.from_text(text=f"{PROMPT_TEMPLATE}. The caption is {GeneratedCaption} "),
            ],
        ),
    ]
    generate_content_config = types.GenerateContentConfig(
    )

    full_response = ""
    for chunk in client.models.generate_content_stream(
        model=model,
        contents=contents,
        config=generate_content_config,
    ):
        if chunk.text:
            full_response += chunk.text

    # Clean and parse once
    cleaned_text = full_response.strip().replace("```json", "").replace("```", "").replace("None", "").strip()
    try:
        parsed_captions = json.loads(cleaned_text)
        print(json.dumps(parsed_captions, indent=2))
        return parsed_captions
    except json.JSONDecodeError as e:
        print("‚ùå Failed to parse JSON. Raw output:")
        print(cleaned_text)
        print(f"\nError: {e}")
        return None

    # for chunk in client.models.generate_content_stream(
    #     model=model,
    #     contents=contents,
    #     config=generate_content_config,
    # ):
    #     print(chunk.text, end="")
    #     cleaned_text = chunk.text.strip("```json").strip("```").strip("None")
    #     parsed_captions = json.loads(chunk.text)

    #     print(parsed_captions)

if __name__ == "__main__":
    generate()
 